---
name: "release"

on:
  push:
    tags:
      - "1.*"
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning'

jobs:
  flutter-build-android:
    name: "Release for android"
    runs-on: "ubuntu-latest"
    permissions: write-all
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Extract tag name
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "tag=dev" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Echo build progress
        run: echo "Building Kazumi_android_${{ env.tag }}.apk"
        shell: bash

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake libgtk-3-dev ninja-build libayatana-appindicator3-dev libasound2-dev
        shell: bash

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version-file: pubspec.yaml

      - name: Get Flutter dependencies
        run: flutter pub get
        shell: bash

      - name: Build Flutter for Android
        run: |
          flutter build apk --target-platform=android-arm,android-arm64,android-x64 --split-per-abi
        shell: bash

      - name: Check build output directory
        run: ls -R build/app/outputs/flutter-apk/
        shell: bash

      - name: Create output directory
        run: mkdir -p release_outputs
        shell: bash

      - name: Package android build output
        run: |
          cp "build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk" "release_outputs/Kazumi_android_${{ env.tag }}_32bit.apk"
          cp "build/app/outputs/flutter-apk/app-arm64-v8a-release.apk" "release_outputs/Kazumi_android_${{ env.tag }}_64bit.apk"
          cp "build/app/outputs/flutter-apk/app-x86_64-release.apk" "release_outputs/Kazumi_android_${{ env.tag }}_x64.apk"
        shell: bash

      - name: Check copied files
        run: ls -l release_outputs/
        shell: bash

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag }}
          release_name: Release ${{ env.tag }}
          body: |
            Release notes for ${{ env.tag }}
          draft: false
          prerelease: false

      - name: Upload 32-bit APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release_outputs/Kazumi_android_${{ env.tag }}_32bit.apk
          asset_name: Kazumi_android_${{ env.tag }}_32bit.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload 64-bit APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release_outputs/Kazumi_android_${{ env.tag }}_64bit.apk
          asset_name: Kazumi_android_${{ env.tag }}_64bit.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload x64 APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release_outputs/Kazumi_android_${{ env.tag }}_x64.apk
          asset_name: Kazumi_android_${{ env.tag }}_x64.apk
          asset_content_type: application/vnd.android.package-archive
